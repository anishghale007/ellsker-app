// Mocks generated by Mockito 5.3.0 from annotations
// in internship_practice/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i6;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i5;
import 'package:internship_practice/core/error/failure.dart' as _i8;
import 'package:internship_practice/core/network/network_info.dart' as _i16;
import 'package:internship_practice/features/call/data/datasources/call_remote_data_source.dart'
    as _i15;
import 'package:internship_practice/features/call/data/models/rtc_token_model.dart'
    as _i3;
import 'package:internship_practice/features/call/domain/entities/call_entity.dart'
    as _i14;
import 'package:internship_practice/features/call/domain/entities/rtc_token_entity.dart'
    as _i9;
import 'package:internship_practice/features/call/domain/repositories/call_repository.dart'
    as _i4;
import 'package:internship_practice/features/call/domain/usecases/end_call_usecase.dart'
    as _i13;
import 'package:internship_practice/features/call/domain/usecases/get_rtc_token_usecase.dart'
    as _i10;
import 'package:internship_practice/features/call/domain/usecases/make_call_usecase.dart'
    as _i11;
import 'package:internship_practice/features/call/domain/usecases/pickup_call_usecase.dart'
    as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtcTokenModel_1 extends _i1.SmartFake implements _i3.RtcTokenModel {
  _FakeRtcTokenModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCallRepository_2 extends _i1.SmartFake
    implements _i4.CallRepository {
  _FakeCallRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_4 extends _i1.SmartFake
    implements _i5.AddressCheckResult {
  _FakeAddressCheckResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CallRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallRepository extends _i1.Mock implements _i4.CallRepository {
  MockCallRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>> getRtcToken(
          _i10.GetRtcTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRtcToken,
          [params],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>>.value(
                _FakeEither_0<_i8.Failure, _i9.RtcTokenEntity>(
          this,
          Invocation.method(
            #getRtcToken,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> makeCall(
          _i11.MakeCallParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeCall,
          [params],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #makeCall,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> pickupCall(
          _i12.PickupCallParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickupCall,
          [params],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #pickupCall,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, void>> endCall(
          _i13.EndCallParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #endCall,
          [params],
        ),
        returnValue: _i7.Future<_i2.Either<_i8.Failure, void>>.value(
            _FakeEither_0<_i8.Failure, void>(
          this,
          Invocation.method(
            #endCall,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, void>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i14.CallEntity>>> getAllCallLogs(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCallLogs,
          [userId],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, List<_i14.CallEntity>>>.value(
                _FakeEither_0<_i8.Failure, List<_i14.CallEntity>>(
          this,
          Invocation.method(
            #getAllCallLogs,
            [userId],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, List<_i14.CallEntity>>>);
}

/// A class which mocks [CallRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallRemoteDataSource extends _i1.Mock
    implements _i15.CallRemoteDataSource {
  MockCallRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.RtcTokenModel> getRtcToken(_i10.GetRtcTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRtcToken,
          [params],
        ),
        returnValue: _i7.Future<_i3.RtcTokenModel>.value(_FakeRtcTokenModel_1(
          this,
          Invocation.method(
            #getRtcToken,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.RtcTokenModel>);
  @override
  _i7.Future<void> makeCall(_i11.MakeCallParams? params) => (super.noSuchMethod(
        Invocation.method(
          #makeCall,
          [params],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> pickupCall(_i12.PickupCallParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickupCall,
          [params],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> endCall(_i13.EndCallParams? params) => (super.noSuchMethod(
        Invocation.method(
          #endCall,
          [params],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i14.CallEntity>> getAllChatLogs(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllChatLogs,
          [userId],
        ),
        returnValue:
            _i7.Future<List<_i14.CallEntity>>.value(<_i14.CallEntity>[]),
      ) as _i7.Future<List<_i14.CallEntity>>);
}

/// A class which mocks [GetRtcTokenUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRtcTokenUsecase extends _i1.Mock
    implements _i10.GetRtcTokenUsecase {
  MockGetRtcTokenUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CallRepository get callRepository => (super.noSuchMethod(
        Invocation.getter(#callRepository),
        returnValue: _FakeCallRepository_2(
          this,
          Invocation.getter(#callRepository),
        ),
      ) as _i4.CallRepository);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>> call(
          _i10.GetRtcTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>>.value(
                _FakeEither_0<_i8.Failure, _i9.RtcTokenEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.Failure, _i9.RtcTokenEntity>>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i5.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);
  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_3(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);
  @override
  List<_i5.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i5.AddressCheckOptions>[],
      ) as List<_i5.AddressCheckOptions>);
  @override
  set addresses(List<_i5.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<_i5.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i7.Future<_i5.InternetConnectionStatus>.value(
            _i5.InternetConnectionStatus.connected),
      ) as _i7.Future<_i5.InternetConnectionStatus>);
  @override
  _i7.Stream<_i5.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i7.Stream<_i5.InternetConnectionStatus>.empty(),
      ) as _i7.Stream<_i5.InternetConnectionStatus>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<_i5.AddressCheckResult> isHostReachable(
          _i5.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i7.Future<_i5.AddressCheckResult>.value(_FakeAddressCheckResult_4(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i7.Future<_i5.AddressCheckResult>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i16.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i6.Response>);
  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i7.Future<_i18.Uint8List>);
  @override
  _i7.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i6.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
